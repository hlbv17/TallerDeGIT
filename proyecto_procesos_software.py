# -*- coding: utf-8 -*-
"""Proyecto_Procesos_Software.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12oISTLGlnEXU2eYRKewxnd3_erQ3M4J6
"""

from bs4 import BeautifulSoup
import requests
import pandas as pan
from os import path
from matplotlib.pyplot import imread
import matplotlib.pyplot as plt
from PIL import Image
import sys, os, webbrowser, platform

import time
from time import sleep
from sys import stdout

import numpy as np
from wordcloud import WordCloud, ImageColorGenerator
from PIL import Image
import requests
from io import BytesIO
 
from sys import stdout
 
RED, WHITE, CYAN, GREEN, END = '\033[91m', '\33[46m', '\033[36m', '\033[1;32m', '\033[0m'
 
print("""
\033[1;32m
                                .....                                         
                         .'cokO000000Okdoc;'...                       
                      .;d0NWMMMMMMMMMMMMMWWKko;.                                 
                 . .'ckNWWWWMMMMMMMMMMMWWWWWWWXkc.                              
               ...'c0NWWWWWNWWMMMMMMMWWNNNWWWWWWNO;   ....                               _   _        _____  ____   _____     _      ____  
            .....'lkXWWWWWNNXKKXWWWWNK00KNNNWWWWWNOc.  ....                             | | | | ____ | ____||  _ | |_   _|   | |    / ___| ____ 
           ......,l0NXOdc;;clc;cxxdddxl;::;;:ld0NNOo;.  ....                            | | | || ___||  _|  | |_) |  | |    | _ |  | |  _ | ___|
        ..........coc,.      .'.;dxdlc:'.      .;k0o,.......                            | |_| ||___ || |___ |  _ <   | |   | ___ | | |_| ||___ |
       ..........',.   ...     .,lc:;'.    ...   .;l'...'...  .                          |___| |____||_____||_| \_|  |_|  |_|   |_| \____||____|
       ....''....'.   ..''... ...   .''. ..''...   ',. ..'''...                                                           
       ...','....,.   ..:l;',;'       ',..'cc...   .'.  .,''''.                 
       ..',,'.'..;'  ...,:c;,'.  ..    ..;lc;'..  ','.  .,''''.                 
       .'',,'.',''',,,;,;:'... .ld;,.  ..';;:;,''','..  .,,'''.                 
      .'',,,..'''.''',,......   ;l;'.  ...........','....','''..                  
       .',,,'...  ....   ...    ';'..     ...     ...'...','''..                
       .....      ..    .'.     .....     .;.     ......  .......                ___  _   _  _____  _____   ____  ____      _     _   _  _____  _____ 
              ...','......          ..     ,:.  'd0kooo;.      .                |_ _|| \ | ||_   _|| ____| / ___||  _ |    | |   | \ | ||_   _|| ____| ____ 
             .:kOkkOOc...                   .. .,cdddkx,         .               | | |  \| |  | |  |  _|  | |  _ | |_) |  | _ |  |  \| |  | |  |  _|  | ___|
              .xX0k0Od,                         ..,,';.                          | | | |\  |  | |  | |___ | |_| ||  _ <  | ___ | | |\  |  | |  | |___ |___ |
         ..    ,l:::,....                    .   ...,,     .                    |___||_| \_|  |_|  |_____| \____||_| \_||_|   |_||_| \_|  |_|  |_____||____|
    .     ..    ...           . ........ .                ..     .                  
    .   .. .                 .  ..... .....                ...        
       .dl..               ..... ..  .....               ..:x,                    1.- Helen Lisbeth Bernal Vera.
        ,:.                 .....   ......               ..;,.                    2.- Joe Fernando Vélez Calero.
                     ..        .........       .                                  3.- Renán Oswaldo Pérez Balladares.
                 ......                        ......                             4.- Jonatán Josué Guillén Salabarria.
               .........                ..   .........                
             .  .''''','..                  .''''''..                 
              ...... ...''......         ..''''.'.....                
               .. ....  ..''..................   .                    
                         ..''...  ....      .                         
                           ............  ..                           
""")
print("\033[1;32m                                                       ____  ____    _____   _______ ____ _____ ___   ");
print("\033[1;32m                                                      |  _ \|  _ \  / _ \ \ / / ____/ ___|_   _/ _ \  ");
print("\033[1;32m                                                      | |_) | |_) || | | \ V /|  _|| |     | || | | | ");
print("\033[1;32m                                                      |  __/|  _ < | |_| || | | |__| |___  | || |_| | ");
print("\033[1;32m                                                      |_|   |_| \_\ \___/ |_| |_____\____| |_| \___/  ");
print("\033[1;32m                    ____  ____    ___   ____ _____ ____   ___  ____     ____  _____    ____   ___  _____ _______        ___    ____  _____    "); 
print("\033[1;32m                   |  _ \|  _ \  / _ \ / ___| ____/ ___| / _ \/ ___|   |  _ \| ____|  / ___| / _ \|  ___|_   _\ \      / / \  |  _ \| ____|   ");
print("\033[1;32m                   | |_) | |_) || | | | |   |  _| \___ \| | | \___ \   | | | |  _|    \___ \| | | | |_    | |  \ \ /\ / / _ \ | |_) |  _|     ");
print("\033[1;32m                   |  __/|  _ < | |_| | |___| |___ ___) | |_| |___) |  | |_| | |___    ___) | |_| |  _|   | |   \ V  V / ___ \|  _ <| |___    ");
print("\033[1;32m                   |_|   |_| \_\ \___/ \____|_____|____/ \___/|____/   |____/|_____|  |____/ \___/|_|     |_|    \_/\_/_/   \_\_| \_\_____|\n ");
time.sleep(2)
 
for i in range(101):
        time.sleep(0.01)
        stdout.write("\r{0}[{3}*{0}]{2} Iniciando Programa Por Favor Espere... %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
        stdout.flush()
        time.sleep(0.02)

join = list ()    # join: 
npag = list ()    # npag: números de páginas
lbls = list ()    # lbls: etiquetas de usuario
nmbrs = list ()   # nmbrs: número de etiqueda
labels = list ()
numbers = list ()

id = input("\n\n[*] Digite el ID del usuario para mostrar la nube de palabras: \n    ")
print("\n")
#print (type (id),"\'",id,"\'")
id = id.strip ()  # Elimina espacios en blanco al final y al inicio
#print (type (id),"\'",id,"\'")

for i in range(101):
        time.sleep(0.01)
        stdout.write("\r{0}[{3}*{0}]{2} Abriendo Base De Datos De StackOverFlow... %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
        stdout.flush()
        time.sleep(0.02)

for i in range(101):
        time.sleep(0.01)
        stdout.write("\r{0}[{3}*{0}]{2} Cargando Usuarios De StackOverFlow... %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
        stdout.flush()
        time.sleep(0.02)

print (f"\n\n[*] Buscando Usuario << {id} >> En StackOverFlow Data Base Por Favor Espere")
for i in range(101):
        time.sleep(0.01)
        stdout.write("\r{0}[{3}*{0}]{2} %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
        stdout.flush()
        time.sleep(0.02)

if id.isdigit () != True:
  print ("\n\nDato no valido.")
else:
  url = 'https://es.stackoverflow.com/users/' + id + "/?tab=tags"
  page = requests.get (url)   # requests chequea que el url funciona

  if page.status_code == 404:
    print ("\n\n[*] Error",page.status_code,"Not Found: Usuario no encontrado.")
  else:
    print ("\n\n[*] Usuario Encontrado: \n", url)
    soup = BeautifulSoup (page.content, "html.parser") # BeautifulSoup analiza el htlm

    for f in soup.find_all ('a', class_='m0 badge-tag js-rep-box-next-badge'):
      join.append (f.text)
    #print (join)
    #print (len (join))

    for a in soup.find_all ('a', class_='s-pagination--item js-pagination-item'):
      npag.append (a.text)
    #print (npag)

    if len (npag) == 0:
      #print ('last page: 1')

      for c in soup.find_all ('a', class_='post-tag'):
        lbls.append (c.text)
      if int (len (join)) == 0 and len (lbls) != 0:
        lbls.pop(0) # borra primer elemento que se repite
      #print (lbls)
      #print (len (lbls))
      for d in soup.find_all ('div', class_='answer-votes'):
        nmbrs.append (d.text)
      #print (nmbrs)
      #print (len (nmbrs))
      cont=0
      for g in nmbrs:
        if int (len (nmbrs[cont])) > 1:
            #print (nmbrs[0][-1])
            if nmbrs[cont][-1] == 'k':
              nmbrs[cont] = nmbrs[cont][:-1]
              #print (nmbrs[0])
              nmbrs[cont] = nmbrs[cont]+'000'
        cont=cont+1
      #print (nmbrs)
      #print (len (nmbrs))
      counter=0
      for e in nmbrs:
        if int (e) > 0:
          numbers.append (int (e))
          labels.append (lbls[counter])
        counter=counter+1
      lbls.clear ()
      nmbrs.clear ()
    else:
      #print ('last page:',npag [int (len (npag))-2])

      for b in range (int (npag [int (len (npag))-2])):
        num = b+1
        #print ("Page:",num)
        url = 'https://es.stackoverflow.com/users/' + id + '/?tab=tags&sort=votes&page=' + str (num)
        page = requests.get (url)
        soup = BeautifulSoup (page.content, 'html.parser')
        for c in soup.find_all ('a', class_='post-tag'):
          lbls.append (c.text) 
        if int (len (join)) == 0:
          lbls.pop(0) # borra primer elemento que se repite
        #print (lbls)
        #print (len (lbls))
        for d in soup.find_all ('div', class_='answer-votes'):
          nmbrs.append (d.text)
        #print (nmbrs)
        #print (len (nmbrs))
        cont=0
        for g in nmbrs:
          if int (len (nmbrs[cont])) > 1:
              #print (nmbrs[0][-1])
              if nmbrs[cont][-1] == 'k':
                nmbrs[cont] = nmbrs[cont][:-1]
                #print (nmbrs[0])
                nmbrs[cont] = nmbrs[cont]+'000'
          cont=cont+1
        #print (nmbrs)
        #print (len (nmbrs))
        counter=0
        for e in nmbrs:
          if int (e) > 0:
            numbers.append (int (e))
            labels.append (lbls[counter])
          counter=counter+1

        lbls.clear ()
        nmbrs.clear ()

    print ('\n')

    #print (labels)
    #print (len (labels))

    #print (numbers)
    #print (len (numbers))

    if len (labels) == 0:  
      print ("\n[*] Este usuario no tiene etiquetas")    

    else:
      print ("\033[36m")
      opc = input ("[*]  Menu De Imagenes: \n[*] 1.- Nube. \n[*] 2.- Gato. \n[*] 3.- Mario. \n[*]  ¿Qué Forma Desea?: \n    ")
      opc = opc.strip ()  # Elimina espacios en blanco al final y al inicio
      print ("\n")
      for i in range(101):
        time.sleep (0.01)
        stdout.write ("\r{0}[{3}*{0}]{2} Cargando Etiquetas Del Usuario... %d%%".format(GREEN, END, CYAN, RED, WHITE) % i)
        stdout.flush ()
        time.sleep (0.02)

      if opc == "1":
        url = "https://i.imgur.com/lT11QG4.png"
        clr = "white"
        cw = 0
      elif opc == "2":
        url = "https://i.imgur.com/2gcl5bA.png"
        clr = "white"
        cw = 3
      elif opc == "3":
        url = "https://i.imgur.com/28vAIdX.jpg"
        clr = "black"
        cw = 0
      else:
        print ("\nOpción no valida.")

      print ("\n")

      dic = dict (zip (tuple (labels), tuple (numbers)))
      response = requests.get (url)
      creation = np.asarray (Image.open (BytesIO (response.content)))  #np transforma la imagen en un array
      wordcloud = WordCloud (background_color = clr, mask=creation, contour_width = cw, max_words=1000).generate_from_frequencies (dic)
      colors = ImageColorGenerator (creation)
      wordcloud.recolor (color_func = colors)
      plt.figure (figsize = (15, 8))
      plt.imshow (wordcloud)
      plt.axis ("off")
      plt.show ()
      plt.close ()